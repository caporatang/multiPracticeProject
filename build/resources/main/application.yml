##default
## batch Test - ddl-auto create !!!
#
#spring:
#  profiles:
#    active: h2
#  # JPA
#  jpa:
#    show-sql: true
#    properties:
#      hibernate:
#        format_sql: true
#    hibernate:
#      ddl-auto: create
#    #  SQL auto Create allow - use - true, always,  notUse - false, never
#    defer-datasource-initialization: true
#    database: h2
#  sql:
#    init:
#      mode: always
#---
##  H2
#spring:
#  config:
#    activate:
#      on-profile: h2
#    #  Dev Options
#  devtools:
#    livereload:
#      enabled: true
#  thymeleaf:
#    cache: true
#  datasource:
#    url: jdbc:h2:tcp://localhost/~/multi
#    driver-class-name: org.h2.Driver
#    username: sa

spring:
  h2:
    console:
      enabled: true
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    # generate-ddl 과 ddl-auto의 차이
    # h2 db는 generate-ddl을 자동 처리, 실제로는 none과 false로 다 막고 사용함
    # generate-ddl은 jpa의 하위 속성이고, 구현체와 상관없이 자동화된 ddl을 사용할수있게 해주는것임
    generate-ddl: true

    hibernate:
      # ddl-auto hibernate에서 제공하는 좀 더 디테일한 옵션임
      # 둘다 true인 경우, ddl-auto가 실행된다.

      # h2DB를 사용할때 따로 옵션 지정을 하지 않아도 사용할수있는 이유
      # -> 임베디드 데이터베이스는 기본적으로 create-drop으로 설정되어 실행되기 때문임
      ddl-auto: create-drop
    defer-datasource-initialization: true
  sql:
    init:
      mode: always
  datasource:
    url: jdbc:mysql://localhost:3306/book_manager
    username: root
    password:
