package com.multi.pratice.multipratice.springbasic.basicoop;

/**
 * packageName : com.multi.pratice.multipratice.springbasic
 * fileName : OopPrograming
 * author : taeil
 * date : 2023/02/16
 * description :
 * =======================================================
 * DATE          AUTHOR                      NOTE
 * -------------------------------------------------------
 * 2023/02/16        taeil                   최초생성
 */
public class OopPrograming {
    // 객체지향이란 ?
    // 현실에 존재하는 사물을 있는 그대로 모델링
    // -> 행위와 속성을 정의

    // 사물을 객체(Object) 행위를 Method , 속성을 변수(Variable)로 정의

    // 객체의 3가지 요소
    // 상태 유지 ( 객체의 상태 ) -> 객체는 상태 정보를 저장하고 유지되어야 하고, 속성은 변수로 정의되어져야함, 속성값이 바뀜으로 인해 객체의 상태가 변경 될 수 있어야함
    // 기능 제공 ( 객체의 책임 ) -> 객체는 기능을 제공해야함 -> Method 제공, 캡슐화와 연관이 되고, 외부로 부터 직접 속성에 접근하여 변경이 아닌 객체가 제공하는 Method로 기능이 제공 되어야함
    // 고유 식별자 제공 ( 객체의 유일성 ) -> 각각의 객체는 고유한 식별자를 가져야함, 예를 들면 카드번호, 계좌번호 등과 같은 속성을 통해서 각각 고유한 값을 줄 수 있음

    // 물리 객체와 개념 객체
    // 물리적 객체는 실제로 사물이 존재하며, 이를 클래스로 정의한 객체를 의미함
    // ex) 자동차 렌탈 시스템 : 자동차, 고객, 직원, 사업장, 정비소
    // 개념 객체
    // 웹 시스템을 개발한다고 가정했을때 business logic을 처리하는 Service 클래스가 개념객체에 해당함
    // Business logic에서는 여러 객체를 서로 상호작용 하도록하며, 객체가 제공하는 오퍼레이션 method를 통해 객체의 속성을 변경시킴


}